//@version=5
strategy("Statistical Arbitrage Strategy - Clean Signals", overlay=true)

// Input parameters
length = input.int(50, title="Lookback Period for Linear Regression")
threshold = input.float(2.0, title="Threshold for Trading Signals (in Std Dev)")
bandwidth = input.float(0.1, title="Bandwidth for Nadaraya-Watson Estimator")
tp_level = input.float(1.5, title="Take Profit Level (in Std Dev)")
sl_level = input.float(1.0, title="Stop Loss Level (in Std Dev)")

// Dynamic Data Fetching
// Primary asset: Use the current chart's symbol (e.g., BTCUSD)
asset1 = close

// Secondary asset: Fetch data dynamically using a user-defined input
secondary_ticker = input.symbol("ETHUSD", title="Secondary Asset Ticker")
asset2 = request.security(secondary_ticker, timeframe.period, close)

// Linear Regression: Model the relationship between asset1 and asset2
beta = ta.linreg(asset2, length, 0)
alpha = ta.linreg(asset1, length, 0)
linear_fit = alpha + beta * asset1

// Residuals: Difference between actual and predicted price
residuals = asset2 - linear_fit

// Nadaraya-Watson Estimator: Non-linear smoothing of residuals
nw_estimator(array, bandwidth) =>
    sum_kernel = 0.0
    sum_weighted = 0.0
    for i = 0 to length - 1
        kernel_weight = math.exp(-math.pow(i / (bandwidth * length), 2))
        sum_kernel += kernel_weight
        sum_weighted += array[i] * kernel_weight
    sum_weighted / sum_kernel

nw_residuals = nw_estimator(residuals, bandwidth)

// Combined Model: Linear fit + Non-linear residuals
combined_fit = linear_fit + nw_residuals

// Trading Signals
signal_threshold = ta.stdev(residuals, length) * threshold

// Buy Signal: When asset2 is undervalued relative to the model
buy_signal = ta.crossover(residuals, -signal_threshold)

// Sell Signal: When asset2 is overvalued relative to the model
sell_signal = ta.crossunder(residuals, signal_threshold)

// Plot Buy/Sell Signals with Arrows
plotshape(buy_signal, style=shape.labelup, location=location.belowbar, color=color.new(color.green, 0), text="BUY", size=size.small, textcolor=color.white)
plotshape(sell_signal, style=shape.labeldown, location=location.abovebar, color=color.new(color.red, 0), text="SELL", size=size.small, textcolor=color.white)

// Display Entry, Stop-Loss, and Take-Profit Levels
if buy_signal
    label.new(
    bar_index, na,
        text="üìà Long (Buy) Signal:\n‚úÖ Entry: " + str.tostring(close) + "\nüõë Stop-Loss: " + str.tostring(close - sl_level * ta.stdev(residuals, length)) + "\nüéØ Take-Profit: " + str.tostring(close + tp_level * ta.stdev(residuals, length)),
        color=color.new(color.green, 90), textcolor=color.white, style=label.style_label_down, yloc=yloc.abovebar
    )

if sell_signal
    label.new(
        bar_index, na,
        text="üìâ Short (Sell) Signal:\n‚ùå Entry: " + str.tostring(close) + "\nüõë Stop-Loss: " + str.tostring(close + sl_level * ta.stdev(residuals, length)) + "\nüéØ Take-Profit: " + str.tostring(close - tp_level * ta.stdev(residuals, length)),
        color=color.new(color.red, 90), textcolor=color.white, style=label.style_label_up, yloc=yloc.belowbar
    )

// Trend Analysis
uptrend = ta.rising(combined_fit, 2)
downtrend = ta.falling(combined_fit, 2)
sideways = not uptrend and not downtrend

// Visualize Trend Direction
bgcolor(uptrend ? color.new(color.blue, 90) : na, title="Uptrend")
bgcolor(downtrend ? color.new(color.red, 90) : na, title="Downtrend")
bgcolor(sideways ? color.new(color.gray, 90) : na, title="Sideways")
